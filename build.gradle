plugins {
    id 'idea'
    id 'java'

    id 'com.diffplug.gradle.spotless' version '3.27.2'
    id 'com.github.ben-manes.versions' version '0.33.0'
    id 'com.google.cloud.tools.jib' version '2.5.0'
    id 'de.undercouch.download' version '4.0.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'org.springframework.boot' version '2.4.0'
}


allprojects {
    group = 'bio.terra'
    version = System.getenv('SERVICE_VERSION') != null ? System.getenv('SERVICE_VERSION') : '0.5.0-SNAPSHOT'
    sourceCompatibility = JavaVersion.VERSION_11
    ext {
        artifactGroup = "${group}.janitor"
        swaggerOutputDir = "${buildDir}/generated"
        resourceDir = "${rootDir}/src/main/resources"
    }

    // specifying versions for dependencies, not adding the dependencies themselves (yet)
    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
        dependencies {
            dependency group: "io.swagger.core.v3", name: "swagger-annotations", version: "2.1.5"
            dependency group: "io.swagger.codegen.v3", name: "swagger-codegen-cli", version: "3.0.22"

            // PF-866: This will need to manually be kept in sync with the version of cloud-resource-schema
            // specified by bio.terra.cloud-resource-lib:platform, as the dependency-management plugin does
            // not support gradle platform plugin:
            //
            // https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/211

            dependency group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema', version: "0.10.0"
        }
    }

    apply plugin: "idea"
    idea {
        module {
            generatedSourceDirs = [file("${swaggerOutputDir}/src/main/java")]
            downloadJavadoc = true
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release-local/'
    }
}

dependencies {
    // Terra deps - we get Stairway via TCL
    implementation group: 'bio.terra', name: 'terra-common-lib', version: '0.0.51-SNAPSHOT'

    // When updating platform version, be sure to keep Spring dependency-management plugin stanza's
    // version of cloud-resource-schema in sync with the platform (PF-866).
    implementation platform('bio.terra.cloud-resource-lib:platform:0.4.0')
    implementation group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-bigquery'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-cloudresourcemanager'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-notebooks'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'google-storage'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'azure-resourcemanager-compute'
    implementation group: 'bio.terra.cloud-resource-lib', name: 'azure-resourcemanager-common'

    // Versioned direct deps
    implementation group: 'com.google.auto.value', name: 'auto-value-annotations', version: '1.7.3'
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    implementation group: 'org.webjars', name: 'webjars-locator-core', version: '0.46'
    implementation group: 'com.google.cloud', name: 'google-cloud-pubsub', version: '1.104.1'
    implementation group: 'io.opencensus', name: 'opencensus-exporter-stats-stackdriver', version: '0.26.0'
    implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    implementation group: 'org.liquibase' , name: 'liquibase-core', version: '3.10.0'
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.2.12'

    // Deps whose versions are controlled by Spring
    implementation group: 'org.apache.commons', name: 'commons-dbcp2'
    implementation group: 'org.apache.commons', name: 'commons-lang3'
    implementation group: 'org.apache.commons', name: 'commons-pool2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    // Swagger deps
    swaggerCodegen group: 'io.swagger.codegen.v3', name: 'swagger-codegen-cli'
    runtimeOnly group: 'org.webjars.npm', name: 'swagger-ui-dist', version: '3.35.2'
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations'

    // Test deps
    testImplementation group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.20.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    annotationProcessor group: 'com.google.auto.value', name: 'auto-value', version: '1.7.3'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
}

dependencyLocking {
    lockAllConfigurations() // see https://docs.gradle.org/current/userguide/dependency_locking.html
}

// for scans
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

java {
    withJavadocJar()
}

// Download and extract the Cloud Profiler Java Agent
ext {
    // where to place the Cloud Profiler agent in the container
    cloudProfilerLocation = '/opt/cprof'

    // location for jib extras, including the Java agent
    jibExtraDirectory = "${buildDir}/jib-agents"
}
task downloadProfilerAgent(type: Download) {
    // where to download the Cloud Profiler agent https://cloud.google.com/profiler/docs/profiling-java
    src 'https://storage.googleapis.com/cloud-profiler/java/latest/profiler_java_agent.tar.gz'
    dest "${buildDir}/cprof_java_agent_gce.tar.gz"
}
task extractProfilerAgent(dependsOn: downloadProfilerAgent, type: Copy) {
    from tarTree(downloadProfilerAgent.dest)
    into "${jibExtraDirectory}/${cloudProfilerLocation}"
}

jib {
    from {
        image = "adoptopenjdk:11-jre-hotspot"
    }
    extraDirectories {
        paths = [file(jibExtraDirectory)]
    }
    container {
        filesModificationTime = java.time.ZonedDateTime.now().toString() // to prevent ui caching
        jvmFlags = [
                '-agentpath:' + cloudProfilerLocation + '/profiler_java_agent.so=' +
                        '-cprof_service=bio.terra.janitor' +
                        ',-cprof_service_version=' + version +
                        ',-cprof_enable_heap_sampling=true' +
                        ',-logtostderr' +
                        ',-minloglevel=2'
        ]
    }
}

tasks.jib.dependsOn extractProfilerAgent
tasks.jibDockerBuild.dependsOn extractProfilerAgent
tasks.jibBuildTar.dependsOn extractProfilerAgent

// Linter
spotless {
    java {
        googleJavaFormat()
        targetExclude "${buildDir}/**"
    }
}


// CRL schema extraction
configurations {
    cloudResourceSchema { transitive = false }
}
dependencies {
    cloudResourceSchema group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema'
}
task unzipCloudResourceSchema(type: Copy) {
    from zipTree(configurations.cloudResourceSchema.singleFile).matching {
        include 'cloud_resources_uid.yaml'
    }
    into "${buildDir}/crlSchema"
}

// OpenAPI/Swagger Server Generation
swaggerSources {
    server {
        inputFile = file("${resourceDir}/api/service_openapi.yaml")
        code {
            language = "spring"
            library = "spring-boot"
            outputDir = file("${swaggerOutputDir}")
            components = ["models", "apis"]
            rawOptions = [
                    "--api-package", "${artifactGroup}.generated.controller",
                    "--model-package", "${artifactGroup}.generated.model",
                    "-D", "interfaceOnly=true," +
                            "useTags=true," +
                            "dateLibrary=java8"
            ]
        }
    }
}

// Testing config

// This is the path to the default Google service account for the janitor service to run as.
def googleCredentialsFile = "${projectDir}/src/test/resources/rendered/sa-account.json"

tasks.withType(Test) {
    environment = [
            'GOOGLE_APPLICATION_CREDENTIALS': "${googleCredentialsFile}"
    ]
    testLogging {
        events = ["passed", "failed", "skipped"]
        // Causes the correct line to be reported on an exception.
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        reports {
            // Write XML file (used by CircleCI, Jenkins, etc) to build/test-results/*
            junitXml.enabled = true
            // Write human-readable test report to build/reports/tests/*
            html.enabled = true
        }
    }
}

test {
    useJUnitPlatform()
}

task unitTest(type: Test) {
    useJUnitPlatform {
        includeTags 'unit'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags "integration"
    }
    // Force tests to always be re-run, since integration tests involve communicating with external
    // resources.
    outputs.upToDateWhen { false }
}

// Note The Open API schema depends on an external library - cloud-resource-schema, so need to unzip it first.
swaggerSources.server.code.dependsOn tasks.unzipCloudResourceSchema
compileJava.dependsOn swaggerSources.server.code, spotlessApply
sourceSets.main.java.srcDir "${swaggerOutputDir}/src/main/java"
