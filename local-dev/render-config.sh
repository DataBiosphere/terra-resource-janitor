#!/bin/bash
# Service accounts generated by Terraform and pulled from vault:
# https://github.com/broadinstitute/terraform-ap-deployments/blob/f26945d9d857e879f01671726188cecdc2d7fb10/terra-env/vault_crl_janitor.tf#L43
# TODO(PF-67): Find solution for piping configs and secrets.

# Vault secrets
# TODO: migrate vault secrets to GSM as needed
VAULT_TOKEN=${1:-$(cat $HOME/.vault-token)}
DSDE_TOOLBOX_DOCKER_IMAGE=broadinstitute/dsde-toolbox:dev
VAULT_CLOUD_ACCESS_SERVICE_ACCOUNT_PATH=secret/dsde/terra/janitor-test/default/cloud-access-sa
VAULT_AZURE_MANAGED_APP_PUBLISHER_PATH=secret/dsde/terra/azure/common/managed-app-publisher

# GSM secrets
GSM_CLIENT_SERVICE_ACCOUNT_SECRET=crljanitor-client-sa
GSM_QA_APP_SERVICE_ACCOUNT_SECRET=crljanitor-qa-sa
GSM_QA_CLIENT_SERVICE_ACCOUNT_SECRET=crljanitor-client-qa-sa
GSM_CLIENT_SERVICE_ACCOUNT_PROJECT=broad-dsde-qa

# Rendered paths
SERVICE_ACCOUNT_OUTPUT_FILE_PATH="$(dirname $0)"/../src/test/resources/rendered/sa-account.json
CLIENT_SERVICE_ACCOUNT_OUTPUT_FILE_PATH="$(dirname $0)"/../src/test/resources/rendered/client-sa-account.json
TOOLS_CLIENT_SERVICE_ACCOUNT_OUTPUT_FILE_PATH="$(dirname $0)"/../src/test/resources/rendered/tools-client-sa-account.json
CLOUD_ACCESS_SERVICE_ACCOUNT_OUTPUT_FILE_PATH="$(dirname $0)"/../src/test/resources/rendered/cloud-access-sa-account.json
AZURE_MANAGED_APP_PUBLISHER_OUTPUT_FILE_PATH="$(dirname $0)"/../src/test/resources/rendered/azure-mananged-app-publisher.json
LOCAL_PROPERTIES_DIR="$(dirname $0)"/../config

# Pull secrets from vault
docker run --rm --cap-add IPC_LOCK \
            -e VAULT_TOKEN=$VAULT_TOKEN ${DSDE_TOOLBOX_DOCKER_IMAGE} \
            vault read -format json ${VAULT_CLOUD_ACCESS_SERVICE_ACCOUNT_PATH} \
            | jq -r .data.key | base64 -d > ${CLOUD_ACCESS_SERVICE_ACCOUNT_OUTPUT_FILE_PATH}
docker run --rm --cap-add IPC_LOCK \
            -e VAULT_TOKEN=$VAULT_TOKEN ${DSDE_TOOLBOX_DOCKER_IMAGE} \
            vault read -format json ${VAULT_AZURE_MANAGED_APP_PUBLISHER_PATH} \
            | jq -r .data > ${AZURE_MANAGED_APP_PUBLISHER_OUTPUT_FILE_PATH}

# Pull secrets from GSM
gcloud secrets versions access latest --project $GSM_CLIENT_SERVICE_ACCOUNT_PROJECT --secret $GSM_CLIENT_SERVICE_ACCOUNT_SECRET \
  | jq -r '.key' | base64 -d > "$TOOLS_CLIENT_SERVICE_ACCOUNT_OUTPUT_FILE_PATH"

gcloud secrets versions access latest --project $GSM_CLIENT_SERVICE_ACCOUNT_PROJECT --secret $GSM_QA_APP_SERVICE_ACCOUNT_SECRET \
  | jq -r '.key' | base64 -d > "$SERVICE_ACCOUNT_OUTPUT_FILE_PATH"

gcloud secrets versions access latest --project $GSM_CLIENT_SERVICE_ACCOUNT_PROJECT --secret $GSM_QA_CLIENT_SERVICE_ACCOUNT_SECRET \
  | jq -r '.key' | base64 -d > "$CLIENT_SERVICE_ACCOUNT_OUTPUT_FILE_PATH"

# Write the Azure configuration into the local-properties.yml file
mkdir -p "${LOCAL_PROPERTIES_DIR}"
AZURE_MANAGED_APP_CLIENT_ID=$(jq -r '."client-id"' ${AZURE_MANAGED_APP_PUBLISHER_OUTPUT_FILE_PATH})
AZURE_MANAGED_APP_CLIENT_SECRET=$(jq -r '."client-secret"' ${AZURE_MANAGED_APP_PUBLISHER_OUTPUT_FILE_PATH})
AZURE_MANAGED_APP_TENANT_ID=$(jq -r '."tenant-id"' ${AZURE_MANAGED_APP_PUBLISHER_OUTPUT_FILE_PATH})
cat << EOF > ${LOCAL_PROPERTIES_DIR}/local-properties.yml
janitor:
  azure:
    managed-app-client-id: ${AZURE_MANAGED_APP_CLIENT_ID}
    managed-app-client-secret: ${AZURE_MANAGED_APP_CLIENT_SECRET}
    managed-app-tenant-id: ${AZURE_MANAGED_APP_TENANT_ID}
EOF
